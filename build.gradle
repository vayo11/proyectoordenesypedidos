plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.hacom'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    flatDir {
        dirs "${project.projectDir}/libs"
    }
}

ext {
    set('grpcVersion', '1.51.1')
    set('protobufVersion', '3.21.12')
    set('akkaVersion', '2.6.20')
    set('log4j2Version', '2.19.0')
    set('cloudhopperVersion', '5.0.6')
    set('embedMongoVersion', '3.5.3')
    set('reactorVersion', '3.5.0')
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    
    // MongoDB
    implementation 'org.mongodb:mongodb-driver-reactivestreams:4.8.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    
    // gRPC
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    //implementation 'net.devh:grpc-spring-boot-starter:2.14.0.RELEASE'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
    
    // Akka
    implementation "com.typesafe.akka:akka-actor_2.13:${akkaVersion}"
    implementation "com.typesafe.akka:akka-slf4j_2.13:${akkaVersion}"
    
    // Logging
     implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation "org.apache.logging.log4j:log4j-api:${log4j2Version}"
    implementation "org.apache.logging.log4j:log4j-core:${log4j2Version}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j2Version}"

    // Cloudhopper SMPP (JAR local)
   
    implementation 'com.cloudhopper:ch-smpp:5.0.6'
    implementation 'org.jboss.netty:netty:3.2.10.Final'
    
    // Dependencias requeridas por Cloudhopper
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'io.netty:netty-all:4.1.86.Final'
    
    // Reactor
    implementation "io.projectreactor:reactor-core:${reactorVersion}"
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "io.projectreactor:reactor-test:${reactorVersion}"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:${embedMongoVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
            task.plugins {
                grpc {
                    option 'lite'
                }
            }
        }
    }
    generatedFilesBaseDir = "$buildDir/generated"
}

sourceSets {
    main {
        java {
            srcDirs = [
                'src/main/java',
                "$buildDir/generated/main/java",
                "$buildDir/generated/main/grpc"
            ]
        }
        proto {
            srcDirs = ['src/main/proto']
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    configureEach {
        resolutionStrategy {
            force 'org.slf4j:slf4j-api:1.7.36'
            force 'io.netty:netty-all:4.1.86.Final'
        }
    }
}

test {
     enabled = false
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

bootRun {
    systemProperty 'spring.profiles.active', 'dev'
}
